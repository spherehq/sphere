# source: http://localhost:4466/sphere/dev
# timestamp: Tue Apr 16 2019 10:59:46 GMT+0100 (BST)

type AggregatePost {
  count: Int!
}

type AggregatePostMetadata {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
Raw JSON value
"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createPostMetadata(data: PostMetadataCreateInput!): PostMetadata!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deletePost(where: PostWhereUniqueInput!): Post
  upsertPost(
    where: PostWhereUniqueInput!
    create: PostCreateInput!
    update: PostUpdateInput!
  ): Post!
  updateManyPosts(
    data: PostUpdateManyMutationInput!
    where: PostWhereInput
  ): BatchPayload!
  updateManyPostMetadatas(
    data: PostMetadataUpdateManyMutationInput!
    where: PostMetadataWhereInput
  ): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyPostMetadatas(where: PostMetadataWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String!
  content: Json!
  slug: String!
  timeToRead: Int!
  isPublished: Boolean!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  status: POST_STATUS!
  metadata: PostMetadata!
}

enum POST_STATUS {
  PUBLISHED
  DRAFT
  ARCHIVED
  SYNCING
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  content: Json!
  slug: String!
  timeToRead: Int
  isPublished: Boolean
  publishedAt: DateTime
  status: POST_STATUS
  metadata: PostMetadataCreateOneInput!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type PostMetadata {
  fileHash: String!
  filename: String
}

"""
A connection to a list of items.
"""
type PostMetadataConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostMetadataEdge]!
  aggregate: AggregatePostMetadata!
}

input PostMetadataCreateInput {
  fileHash: String!
  filename: String
}

input PostMetadataCreateOneInput {
  create: PostMetadataCreateInput
}

"""
An edge in a connection.
"""
type PostMetadataEdge {
  """
  The item at the end of the edge.
  """
  node: PostMetadata!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostMetadataOrderByInput {
  fileHash_ASC
  fileHash_DESC
  filename_ASC
  filename_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostMetadataPreviousValues {
  fileHash: String!
  filename: String
}

type PostMetadataSubscriptionPayload {
  mutation: MutationType!
  node: PostMetadata
  updatedFields: [String!]
  previousValues: PostMetadataPreviousValues
}

input PostMetadataSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostMetadataSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PostMetadataSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PostMetadataSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostMetadataWhereInput
}

input PostMetadataUpdateDataInput {
  fileHash: String
  filename: String
}

input PostMetadataUpdateManyMutationInput {
  fileHash: String
  filename: String
}

input PostMetadataUpdateOneRequiredInput {
  create: PostMetadataCreateInput
  update: PostMetadataUpdateDataInput
  upsert: PostMetadataUpsertNestedInput
}

input PostMetadataUpsertNestedInput {
  update: PostMetadataUpdateDataInput!
  create: PostMetadataCreateInput!
}

input PostMetadataWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostMetadataWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PostMetadataWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PostMetadataWhereInput!]
  fileHash: String

  """
  All values that are not equal to given value.
  """
  fileHash_not: String

  """
  All values that are contained in given list.
  """
  fileHash_in: [String!]

  """
  All values that are not contained in given list.
  """
  fileHash_not_in: [String!]

  """
  All values less than the given value.
  """
  fileHash_lt: String

  """
  All values less than or equal the given value.
  """
  fileHash_lte: String

  """
  All values greater than the given value.
  """
  fileHash_gt: String

  """
  All values greater than or equal the given value.
  """
  fileHash_gte: String

  """
  All values containing the given string.
  """
  fileHash_contains: String

  """
  All values not containing the given string.
  """
  fileHash_not_contains: String

  """
  All values starting with the given string.
  """
  fileHash_starts_with: String

  """
  All values not starting with the given string.
  """
  fileHash_not_starts_with: String

  """
  All values ending with the given string.
  """
  fileHash_ends_with: String

  """
  All values not ending with the given string.
  """
  fileHash_not_ends_with: String
  filename: String

  """
  All values that are not equal to given value.
  """
  filename_not: String

  """
  All values that are contained in given list.
  """
  filename_in: [String!]

  """
  All values that are not contained in given list.
  """
  filename_not_in: [String!]

  """
  All values less than the given value.
  """
  filename_lt: String

  """
  All values less than or equal the given value.
  """
  filename_lte: String

  """
  All values greater than the given value.
  """
  filename_gt: String

  """
  All values greater than or equal the given value.
  """
  filename_gte: String

  """
  All values containing the given string.
  """
  filename_contains: String

  """
  All values not containing the given string.
  """
  filename_not_contains: String

  """
  All values starting with the given string.
  """
  filename_starts_with: String

  """
  All values not starting with the given string.
  """
  filename_not_starts_with: String

  """
  All values ending with the given string.
  """
  filename_ends_with: String

  """
  All values not ending with the given string.
  """
  filename_not_ends_with: String
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  slug_ASC
  slug_DESC
  timeToRead_ASC
  timeToRead_DESC
  isPublished_ASC
  isPublished_DESC
  publishedAt_ASC
  publishedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  content: Json!
  slug: String!
  timeToRead: Int!
  isPublished: Boolean!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  status: POST_STATUS!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  content: Json
  slug: String
  timeToRead: Int
  isPublished: Boolean
  publishedAt: DateTime
  status: POST_STATUS
  metadata: PostMetadataUpdateOneRequiredInput
}

input PostUpdateManyMutationInput {
  title: String
  content: Json
  slug: String
  timeToRead: Int
  isPublished: Boolean
  publishedAt: DateTime
  status: POST_STATUS
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [PostWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String

  """
  All values that are not equal to given value.
  """
  title_not: String

  """
  All values that are contained in given list.
  """
  title_in: [String!]

  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]

  """
  All values less than the given value.
  """
  title_lt: String

  """
  All values less than or equal the given value.
  """
  title_lte: String

  """
  All values greater than the given value.
  """
  title_gt: String

  """
  All values greater than or equal the given value.
  """
  title_gte: String

  """
  All values containing the given string.
  """
  title_contains: String

  """
  All values not containing the given string.
  """
  title_not_contains: String

  """
  All values starting with the given string.
  """
  title_starts_with: String

  """
  All values not starting with the given string.
  """
  title_not_starts_with: String

  """
  All values ending with the given string.
  """
  title_ends_with: String

  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  slug: String

  """
  All values that are not equal to given value.
  """
  slug_not: String

  """
  All values that are contained in given list.
  """
  slug_in: [String!]

  """
  All values that are not contained in given list.
  """
  slug_not_in: [String!]

  """
  All values less than the given value.
  """
  slug_lt: String

  """
  All values less than or equal the given value.
  """
  slug_lte: String

  """
  All values greater than the given value.
  """
  slug_gt: String

  """
  All values greater than or equal the given value.
  """
  slug_gte: String

  """
  All values containing the given string.
  """
  slug_contains: String

  """
  All values not containing the given string.
  """
  slug_not_contains: String

  """
  All values starting with the given string.
  """
  slug_starts_with: String

  """
  All values not starting with the given string.
  """
  slug_not_starts_with: String

  """
  All values ending with the given string.
  """
  slug_ends_with: String

  """
  All values not ending with the given string.
  """
  slug_not_ends_with: String
  timeToRead: Int

  """
  All values that are not equal to given value.
  """
  timeToRead_not: Int

  """
  All values that are contained in given list.
  """
  timeToRead_in: [Int!]

  """
  All values that are not contained in given list.
  """
  timeToRead_not_in: [Int!]

  """
  All values less than the given value.
  """
  timeToRead_lt: Int

  """
  All values less than or equal the given value.
  """
  timeToRead_lte: Int

  """
  All values greater than the given value.
  """
  timeToRead_gt: Int

  """
  All values greater than or equal the given value.
  """
  timeToRead_gte: Int
  isPublished: Boolean

  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  publishedAt: DateTime

  """
  All values that are not equal to given value.
  """
  publishedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  publishedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  publishedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  publishedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  publishedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  publishedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  publishedAt_gte: DateTime
  createdAt: DateTime

  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime

  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  createdAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime

  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime

  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime

  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime

  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime

  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  status: POST_STATUS

  """
  All values that are not equal to given value.
  """
  status_not: POST_STATUS

  """
  All values that are contained in given list.
  """
  status_in: [POST_STATUS!]

  """
  All values that are not contained in given list.
  """
  status_not_in: [POST_STATUS!]
  metadata: PostMetadataWhereInput
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

enum PrismaDatabase {
  default
}

type Query {
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post]!
  postMetadatas(
    where: PostMetadataWhereInput
    orderBy: PostMetadataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PostMetadata]!
  post(where: PostWhereUniqueInput!): Post
  postsConnection(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PostConnection!
  postMetadatasConnection(
    where: PostMetadataWhereInput
    orderBy: PostMetadataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PostMetadataConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  postMetadata(
    where: PostMetadataSubscriptionWhereInput
  ): PostMetadataSubscriptionPayload
}
