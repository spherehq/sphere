// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Account {
  id: ID!
  status: AccountStatus!
  fullName: String!
  emailAddress: String!
  profileImageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  spheres(where: SphereWhereInput, orderBy: SphereOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sphere!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type AccountConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  id: ID
  status: AccountStatus
  fullName: String!
  emailAddress: String!
  profileImageUrl: String
  spheres: SphereCreateManyWithoutAssociatedWithInput
  posts: PostCreateManyInput
}

input AccountCreateOneInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

input AccountCreateOneWithoutSpheresInput {
  create: AccountCreateWithoutSpheresInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutSpheresInput {
  id: ID
  status: AccountStatus
  fullName: String!
  emailAddress: String!
  profileImageUrl: String
  posts: PostCreateManyInput
}

type AccountEdge {
  node: Account!
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  fullName_ASC
  fullName_DESC
  emailAddress_ASC
  emailAddress_DESC
  profileImageUrl_ASC
  profileImageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AccountPreviousValues {
  id: ID!
  status: AccountStatus!
  fullName: String!
  emailAddress: String!
  profileImageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AccountStatus {
  VERIFIED
  ACTIVE
  INACTIVE
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
  AND: [AccountSubscriptionWhereInput!]
  OR: [AccountSubscriptionWhereInput!]
  NOT: [AccountSubscriptionWhereInput!]
}

input AccountUpdateDataInput {
  status: AccountStatus
  fullName: String
  emailAddress: String
  profileImageUrl: String
  spheres: SphereUpdateManyWithoutAssociatedWithInput
  posts: PostUpdateManyInput
}

input AccountUpdateInput {
  status: AccountStatus
  fullName: String
  emailAddress: String
  profileImageUrl: String
  spheres: SphereUpdateManyWithoutAssociatedWithInput
  posts: PostUpdateManyInput
}

input AccountUpdateManyMutationInput {
  status: AccountStatus
  fullName: String
  emailAddress: String
  profileImageUrl: String
}

input AccountUpdateOneRequiredInput {
  create: AccountCreateInput
  update: AccountUpdateDataInput
  upsert: AccountUpsertNestedInput
  connect: AccountWhereUniqueInput
}

input AccountUpdateOneRequiredWithoutSpheresInput {
  create: AccountCreateWithoutSpheresInput
  update: AccountUpdateWithoutSpheresDataInput
  upsert: AccountUpsertWithoutSpheresInput
  connect: AccountWhereUniqueInput
}

input AccountUpdateWithoutSpheresDataInput {
  status: AccountStatus
  fullName: String
  emailAddress: String
  profileImageUrl: String
  posts: PostUpdateManyInput
}

input AccountUpsertNestedInput {
  update: AccountUpdateDataInput!
  create: AccountCreateInput!
}

input AccountUpsertWithoutSpheresInput {
  update: AccountUpdateWithoutSpheresDataInput!
  create: AccountCreateWithoutSpheresInput!
}

input AccountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: AccountStatus
  status_not: AccountStatus
  status_in: [AccountStatus!]
  status_not_in: [AccountStatus!]
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  emailAddress: String
  emailAddress_not: String
  emailAddress_in: [String!]
  emailAddress_not_in: [String!]
  emailAddress_lt: String
  emailAddress_lte: String
  emailAddress_gt: String
  emailAddress_gte: String
  emailAddress_contains: String
  emailAddress_not_contains: String
  emailAddress_starts_with: String
  emailAddress_not_starts_with: String
  emailAddress_ends_with: String
  emailAddress_not_ends_with: String
  profileImageUrl: String
  profileImageUrl_not: String
  profileImageUrl_in: [String!]
  profileImageUrl_not_in: [String!]
  profileImageUrl_lt: String
  profileImageUrl_lte: String
  profileImageUrl_gt: String
  profileImageUrl_gte: String
  profileImageUrl_contains: String
  profileImageUrl_not_contains: String
  profileImageUrl_starts_with: String
  profileImageUrl_not_starts_with: String
  profileImageUrl_ends_with: String
  profileImageUrl_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  spheres_every: SphereWhereInput
  spheres_some: SphereWhereInput
  spheres_none: SphereWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  id: ID
  emailAddress: String
}

type AggregateAccount {
  count: Int!
}

type AggregateMedia {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSphere {
  count: Int!
}

type AggregateSphereVerification {
  count: Int!
}

type AggregateSphereVerificationCode {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Media {
  id: ID!
  url: String!
  type: MEDIA_TYPE!
}

enum MEDIA_TYPE {
  IMAGE
}

type MediaConnection {
  pageInfo: PageInfo!
  edges: [MediaEdge]!
  aggregate: AggregateMedia!
}

input MediaCreateInput {
  id: ID
  url: String!
  type: MEDIA_TYPE
}

type MediaEdge {
  node: Media!
  cursor: String!
}

enum MediaOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  type_ASC
  type_DESC
}

type MediaPreviousValues {
  id: ID!
  url: String!
  type: MEDIA_TYPE!
}

type MediaSubscriptionPayload {
  mutation: MutationType!
  node: Media
  updatedFields: [String!]
  previousValues: MediaPreviousValues
}

input MediaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MediaWhereInput
  AND: [MediaSubscriptionWhereInput!]
  OR: [MediaSubscriptionWhereInput!]
  NOT: [MediaSubscriptionWhereInput!]
}

input MediaUpdateInput {
  url: String
  type: MEDIA_TYPE
}

input MediaUpdateManyMutationInput {
  url: String
  type: MEDIA_TYPE
}

input MediaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  type: MEDIA_TYPE
  type_not: MEDIA_TYPE
  type_in: [MEDIA_TYPE!]
  type_not_in: [MEDIA_TYPE!]
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
}

input MediaWhereUniqueInput {
  id: ID
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateManyAccounts(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  createMedia(data: MediaCreateInput!): Media!
  updateMedia(data: MediaUpdateInput!, where: MediaWhereUniqueInput!): Media
  updateManyMedias(data: MediaUpdateManyMutationInput!, where: MediaWhereInput): BatchPayload!
  upsertMedia(where: MediaWhereUniqueInput!, create: MediaCreateInput!, update: MediaUpdateInput!): Media!
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteManyMedias(where: MediaWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createSphere(data: SphereCreateInput!): Sphere!
  updateSphere(data: SphereUpdateInput!, where: SphereWhereUniqueInput!): Sphere
  updateManySpheres(data: SphereUpdateManyMutationInput!, where: SphereWhereInput): BatchPayload!
  upsertSphere(where: SphereWhereUniqueInput!, create: SphereCreateInput!, update: SphereUpdateInput!): Sphere!
  deleteSphere(where: SphereWhereUniqueInput!): Sphere
  deleteManySpheres(where: SphereWhereInput): BatchPayload!
  createSphereVerification(data: SphereVerificationCreateInput!): SphereVerification!
  updateSphereVerification(data: SphereVerificationUpdateInput!, where: SphereVerificationWhereUniqueInput!): SphereVerification
  updateManySphereVerifications(data: SphereVerificationUpdateManyMutationInput!, where: SphereVerificationWhereInput): BatchPayload!
  upsertSphereVerification(where: SphereVerificationWhereUniqueInput!, create: SphereVerificationCreateInput!, update: SphereVerificationUpdateInput!): SphereVerification!
  deleteSphereVerification(where: SphereVerificationWhereUniqueInput!): SphereVerification
  deleteManySphereVerifications(where: SphereVerificationWhereInput): BatchPayload!
  createSphereVerificationCode(data: SphereVerificationCodeCreateInput!): SphereVerificationCode!
  updateSphereVerificationCode(data: SphereVerificationCodeUpdateInput!, where: SphereVerificationCodeWhereUniqueInput!): SphereVerificationCode
  updateManySphereVerificationCodes(data: SphereVerificationCodeUpdateManyMutationInput!, where: SphereVerificationCodeWhereInput): BatchPayload!
  upsertSphereVerificationCode(where: SphereVerificationCodeWhereUniqueInput!, create: SphereVerificationCodeCreateInput!, update: SphereVerificationCodeUpdateInput!): SphereVerificationCode!
  deleteSphereVerificationCode(where: SphereVerificationCodeWhereUniqueInput!): SphereVerificationCode
  deleteManySphereVerificationCodes(where: SphereVerificationCodeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  featuredImage: String!
  slug: String!
  url: String!
  timeToRead: Int!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  status: POST_STATUS!
  author: String
  associatedWith: Sphere!
}

enum POST_STATUS {
  PUBLISHED
  DRAFT
  ARCHIVED
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  featuredImage: String!
  slug: String!
  url: String!
  timeToRead: Int
  publishedAt: DateTime
  status: POST_STATUS
  author: String
  associatedWith: SphereCreateOneWithoutPostsInput!
}

input PostCreateManyInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutAssociatedWithInput {
  create: [PostCreateWithoutAssociatedWithInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAssociatedWithInput {
  id: ID
  title: String!
  featuredImage: String!
  slug: String!
  url: String!
  timeToRead: Int
  publishedAt: DateTime
  status: POST_STATUS
  author: String
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  featuredImage_ASC
  featuredImage_DESC
  slug_ASC
  slug_DESC
  url_ASC
  url_DESC
  timeToRead_ASC
  timeToRead_DESC
  publishedAt_ASC
  publishedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  author_ASC
  author_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  featuredImage: String!
  slug: String!
  url: String!
  timeToRead: Int!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  status: POST_STATUS!
  author: String
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  timeToRead: Int
  timeToRead_not: Int
  timeToRead_in: [Int!]
  timeToRead_not_in: [Int!]
  timeToRead_lt: Int
  timeToRead_lte: Int
  timeToRead_gt: Int
  timeToRead_gte: Int
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: POST_STATUS
  status_not: POST_STATUS
  status_in: [POST_STATUS!]
  status_not_in: [POST_STATUS!]
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateDataInput {
  title: String
  featuredImage: String
  slug: String
  url: String
  timeToRead: Int
  publishedAt: DateTime
  status: POST_STATUS
  author: String
  associatedWith: SphereUpdateOneRequiredWithoutPostsInput
}

input PostUpdateInput {
  title: String
  featuredImage: String
  slug: String
  url: String
  timeToRead: Int
  publishedAt: DateTime
  status: POST_STATUS
  author: String
  associatedWith: SphereUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  featuredImage: String
  slug: String
  url: String
  timeToRead: Int
  publishedAt: DateTime
  status: POST_STATUS
  author: String
}

input PostUpdateManyInput {
  create: [PostCreateInput!]
  update: [PostUpdateWithWhereUniqueNestedInput!]
  upsert: [PostUpsertWithWhereUniqueNestedInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyMutationInput {
  title: String
  featuredImage: String
  slug: String
  url: String
  timeToRead: Int
  publishedAt: DateTime
  status: POST_STATUS
  author: String
}

input PostUpdateManyWithoutAssociatedWithInput {
  create: [PostCreateWithoutAssociatedWithInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAssociatedWithInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAssociatedWithInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAssociatedWithDataInput {
  title: String
  featuredImage: String
  slug: String
  url: String
  timeToRead: Int
  publishedAt: DateTime
  status: POST_STATUS
  author: String
}

input PostUpdateWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  data: PostUpdateDataInput!
}

input PostUpdateWithWhereUniqueWithoutAssociatedWithInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAssociatedWithDataInput!
}

input PostUpsertWithWhereUniqueNestedInput {
  where: PostWhereUniqueInput!
  update: PostUpdateDataInput!
  create: PostCreateInput!
}

input PostUpsertWithWhereUniqueWithoutAssociatedWithInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAssociatedWithDataInput!
  create: PostCreateWithoutAssociatedWithInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  timeToRead: Int
  timeToRead_not: Int
  timeToRead_in: [Int!]
  timeToRead_not_in: [Int!]
  timeToRead_lt: Int
  timeToRead_lte: Int
  timeToRead_gt: Int
  timeToRead_gte: Int
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: POST_STATUS
  status_not: POST_STATUS
  status_in: [POST_STATUS!]
  status_not_in: [POST_STATUS!]
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  associatedWith: SphereWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
  slug: String
  url: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  media(where: MediaWhereUniqueInput!): Media
  medias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media]!
  mediasConnection(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  sphere(where: SphereWhereUniqueInput!): Sphere
  spheres(where: SphereWhereInput, orderBy: SphereOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sphere]!
  spheresConnection(where: SphereWhereInput, orderBy: SphereOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SphereConnection!
  sphereVerification(where: SphereVerificationWhereUniqueInput!): SphereVerification
  sphereVerifications(where: SphereVerificationWhereInput, orderBy: SphereVerificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SphereVerification]!
  sphereVerificationsConnection(where: SphereVerificationWhereInput, orderBy: SphereVerificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SphereVerificationConnection!
  sphereVerificationCode(where: SphereVerificationCodeWhereUniqueInput!): SphereVerificationCode
  sphereVerificationCodes(where: SphereVerificationCodeWhereInput, orderBy: SphereVerificationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SphereVerificationCode]!
  sphereVerificationCodesConnection(where: SphereVerificationCodeWhereInput, orderBy: SphereVerificationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SphereVerificationCodeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Sphere {
  id: ID!
  alias: String
  aliasSlug: String!
  slugPrefix: String!
  associatedWith: Account!
  verifiedBy: SphereVerification!
  createdAt: DateTime!
  updatedAt: DateTime!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type SphereConnection {
  pageInfo: PageInfo!
  edges: [SphereEdge]!
  aggregate: AggregateSphere!
}

input SphereCreateInput {
  id: ID
  alias: String
  aliasSlug: String!
  slugPrefix: String
  associatedWith: AccountCreateOneWithoutSpheresInput!
  verifiedBy: SphereVerificationCreateOneInput!
  posts: PostCreateManyWithoutAssociatedWithInput
}

input SphereCreateManyWithoutAssociatedWithInput {
  create: [SphereCreateWithoutAssociatedWithInput!]
  connect: [SphereWhereUniqueInput!]
}

input SphereCreateOneWithoutPostsInput {
  create: SphereCreateWithoutPostsInput
  connect: SphereWhereUniqueInput
}

input SphereCreateWithoutAssociatedWithInput {
  id: ID
  alias: String
  aliasSlug: String!
  slugPrefix: String
  verifiedBy: SphereVerificationCreateOneInput!
  posts: PostCreateManyWithoutAssociatedWithInput
}

input SphereCreateWithoutPostsInput {
  id: ID
  alias: String
  aliasSlug: String!
  slugPrefix: String
  associatedWith: AccountCreateOneWithoutSpheresInput!
  verifiedBy: SphereVerificationCreateOneInput!
}

type SphereEdge {
  node: Sphere!
  cursor: String!
}

enum SphereOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  aliasSlug_ASC
  aliasSlug_DESC
  slugPrefix_ASC
  slugPrefix_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SpherePreviousValues {
  id: ID!
  alias: String
  aliasSlug: String!
  slugPrefix: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SphereScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  aliasSlug: String
  aliasSlug_not: String
  aliasSlug_in: [String!]
  aliasSlug_not_in: [String!]
  aliasSlug_lt: String
  aliasSlug_lte: String
  aliasSlug_gt: String
  aliasSlug_gte: String
  aliasSlug_contains: String
  aliasSlug_not_contains: String
  aliasSlug_starts_with: String
  aliasSlug_not_starts_with: String
  aliasSlug_ends_with: String
  aliasSlug_not_ends_with: String
  slugPrefix: String
  slugPrefix_not: String
  slugPrefix_in: [String!]
  slugPrefix_not_in: [String!]
  slugPrefix_lt: String
  slugPrefix_lte: String
  slugPrefix_gt: String
  slugPrefix_gte: String
  slugPrefix_contains: String
  slugPrefix_not_contains: String
  slugPrefix_starts_with: String
  slugPrefix_not_starts_with: String
  slugPrefix_ends_with: String
  slugPrefix_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SphereScalarWhereInput!]
  OR: [SphereScalarWhereInput!]
  NOT: [SphereScalarWhereInput!]
}

type SphereSubscriptionPayload {
  mutation: MutationType!
  node: Sphere
  updatedFields: [String!]
  previousValues: SpherePreviousValues
}

input SphereSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SphereWhereInput
  AND: [SphereSubscriptionWhereInput!]
  OR: [SphereSubscriptionWhereInput!]
  NOT: [SphereSubscriptionWhereInput!]
}

input SphereUpdateInput {
  alias: String
  aliasSlug: String
  slugPrefix: String
  associatedWith: AccountUpdateOneRequiredWithoutSpheresInput
  verifiedBy: SphereVerificationUpdateOneRequiredInput
  posts: PostUpdateManyWithoutAssociatedWithInput
}

input SphereUpdateManyDataInput {
  alias: String
  aliasSlug: String
  slugPrefix: String
}

input SphereUpdateManyMutationInput {
  alias: String
  aliasSlug: String
  slugPrefix: String
}

input SphereUpdateManyWithoutAssociatedWithInput {
  create: [SphereCreateWithoutAssociatedWithInput!]
  delete: [SphereWhereUniqueInput!]
  connect: [SphereWhereUniqueInput!]
  set: [SphereWhereUniqueInput!]
  disconnect: [SphereWhereUniqueInput!]
  update: [SphereUpdateWithWhereUniqueWithoutAssociatedWithInput!]
  upsert: [SphereUpsertWithWhereUniqueWithoutAssociatedWithInput!]
  deleteMany: [SphereScalarWhereInput!]
  updateMany: [SphereUpdateManyWithWhereNestedInput!]
}

input SphereUpdateManyWithWhereNestedInput {
  where: SphereScalarWhereInput!
  data: SphereUpdateManyDataInput!
}

input SphereUpdateOneRequiredWithoutPostsInput {
  create: SphereCreateWithoutPostsInput
  update: SphereUpdateWithoutPostsDataInput
  upsert: SphereUpsertWithoutPostsInput
  connect: SphereWhereUniqueInput
}

input SphereUpdateWithoutAssociatedWithDataInput {
  alias: String
  aliasSlug: String
  slugPrefix: String
  verifiedBy: SphereVerificationUpdateOneRequiredInput
  posts: PostUpdateManyWithoutAssociatedWithInput
}

input SphereUpdateWithoutPostsDataInput {
  alias: String
  aliasSlug: String
  slugPrefix: String
  associatedWith: AccountUpdateOneRequiredWithoutSpheresInput
  verifiedBy: SphereVerificationUpdateOneRequiredInput
}

input SphereUpdateWithWhereUniqueWithoutAssociatedWithInput {
  where: SphereWhereUniqueInput!
  data: SphereUpdateWithoutAssociatedWithDataInput!
}

input SphereUpsertWithoutPostsInput {
  update: SphereUpdateWithoutPostsDataInput!
  create: SphereCreateWithoutPostsInput!
}

input SphereUpsertWithWhereUniqueWithoutAssociatedWithInput {
  where: SphereWhereUniqueInput!
  update: SphereUpdateWithoutAssociatedWithDataInput!
  create: SphereCreateWithoutAssociatedWithInput!
}

type SphereVerification {
  id: ID!
  url: String!
  code: SphereVerificationCode!
  status: SphereVerificationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SphereVerificationCode {
  id: ID!
  issuedAt: DateTime!
  updatedAt: DateTime!
  value: String!
  status: SphereVerificationCodeStatus!
  associatedWith: Account!
}

type SphereVerificationCodeConnection {
  pageInfo: PageInfo!
  edges: [SphereVerificationCodeEdge]!
  aggregate: AggregateSphereVerificationCode!
}

input SphereVerificationCodeCreateInput {
  id: ID
  value: String!
  status: SphereVerificationCodeStatus
  associatedWith: AccountCreateOneInput!
}

input SphereVerificationCodeCreateOneInput {
  create: SphereVerificationCodeCreateInput
  connect: SphereVerificationCodeWhereUniqueInput
}

type SphereVerificationCodeEdge {
  node: SphereVerificationCode!
  cursor: String!
}

enum SphereVerificationCodeOrderByInput {
  id_ASC
  id_DESC
  issuedAt_ASC
  issuedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
  status_ASC
  status_DESC
}

type SphereVerificationCodePreviousValues {
  id: ID!
  issuedAt: DateTime!
  updatedAt: DateTime!
  value: String!
  status: SphereVerificationCodeStatus!
}

enum SphereVerificationCodeStatus {
  ISSUED
  CLAIMED
  INVALIDATED
}

type SphereVerificationCodeSubscriptionPayload {
  mutation: MutationType!
  node: SphereVerificationCode
  updatedFields: [String!]
  previousValues: SphereVerificationCodePreviousValues
}

input SphereVerificationCodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SphereVerificationCodeWhereInput
  AND: [SphereVerificationCodeSubscriptionWhereInput!]
  OR: [SphereVerificationCodeSubscriptionWhereInput!]
  NOT: [SphereVerificationCodeSubscriptionWhereInput!]
}

input SphereVerificationCodeUpdateDataInput {
  value: String
  status: SphereVerificationCodeStatus
  associatedWith: AccountUpdateOneRequiredInput
}

input SphereVerificationCodeUpdateInput {
  value: String
  status: SphereVerificationCodeStatus
  associatedWith: AccountUpdateOneRequiredInput
}

input SphereVerificationCodeUpdateManyMutationInput {
  value: String
  status: SphereVerificationCodeStatus
}

input SphereVerificationCodeUpdateOneRequiredInput {
  create: SphereVerificationCodeCreateInput
  update: SphereVerificationCodeUpdateDataInput
  upsert: SphereVerificationCodeUpsertNestedInput
  connect: SphereVerificationCodeWhereUniqueInput
}

input SphereVerificationCodeUpsertNestedInput {
  update: SphereVerificationCodeUpdateDataInput!
  create: SphereVerificationCodeCreateInput!
}

input SphereVerificationCodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  issuedAt: DateTime
  issuedAt_not: DateTime
  issuedAt_in: [DateTime!]
  issuedAt_not_in: [DateTime!]
  issuedAt_lt: DateTime
  issuedAt_lte: DateTime
  issuedAt_gt: DateTime
  issuedAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  status: SphereVerificationCodeStatus
  status_not: SphereVerificationCodeStatus
  status_in: [SphereVerificationCodeStatus!]
  status_not_in: [SphereVerificationCodeStatus!]
  associatedWith: AccountWhereInput
  AND: [SphereVerificationCodeWhereInput!]
  OR: [SphereVerificationCodeWhereInput!]
  NOT: [SphereVerificationCodeWhereInput!]
}

input SphereVerificationCodeWhereUniqueInput {
  id: ID
  value: String
}

type SphereVerificationConnection {
  pageInfo: PageInfo!
  edges: [SphereVerificationEdge]!
  aggregate: AggregateSphereVerification!
}

input SphereVerificationCreateInput {
  id: ID
  url: String!
  code: SphereVerificationCodeCreateOneInput!
  status: SphereVerificationStatus
}

input SphereVerificationCreateOneInput {
  create: SphereVerificationCreateInput
  connect: SphereVerificationWhereUniqueInput
}

type SphereVerificationEdge {
  node: SphereVerification!
  cursor: String!
}

enum SphereVerificationOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SphereVerificationPreviousValues {
  id: ID!
  url: String!
  status: SphereVerificationStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum SphereVerificationStatus {
  VERIFIED
  AWAITING_VERIFICATION
  DISABLED
}

type SphereVerificationSubscriptionPayload {
  mutation: MutationType!
  node: SphereVerification
  updatedFields: [String!]
  previousValues: SphereVerificationPreviousValues
}

input SphereVerificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SphereVerificationWhereInput
  AND: [SphereVerificationSubscriptionWhereInput!]
  OR: [SphereVerificationSubscriptionWhereInput!]
  NOT: [SphereVerificationSubscriptionWhereInput!]
}

input SphereVerificationUpdateDataInput {
  url: String
  code: SphereVerificationCodeUpdateOneRequiredInput
  status: SphereVerificationStatus
}

input SphereVerificationUpdateInput {
  url: String
  code: SphereVerificationCodeUpdateOneRequiredInput
  status: SphereVerificationStatus
}

input SphereVerificationUpdateManyMutationInput {
  url: String
  status: SphereVerificationStatus
}

input SphereVerificationUpdateOneRequiredInput {
  create: SphereVerificationCreateInput
  update: SphereVerificationUpdateDataInput
  upsert: SphereVerificationUpsertNestedInput
  connect: SphereVerificationWhereUniqueInput
}

input SphereVerificationUpsertNestedInput {
  update: SphereVerificationUpdateDataInput!
  create: SphereVerificationCreateInput!
}

input SphereVerificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  code: SphereVerificationCodeWhereInput
  status: SphereVerificationStatus
  status_not: SphereVerificationStatus
  status_in: [SphereVerificationStatus!]
  status_not_in: [SphereVerificationStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SphereVerificationWhereInput!]
  OR: [SphereVerificationWhereInput!]
  NOT: [SphereVerificationWhereInput!]
}

input SphereVerificationWhereUniqueInput {
  id: ID
}

input SphereWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  aliasSlug: String
  aliasSlug_not: String
  aliasSlug_in: [String!]
  aliasSlug_not_in: [String!]
  aliasSlug_lt: String
  aliasSlug_lte: String
  aliasSlug_gt: String
  aliasSlug_gte: String
  aliasSlug_contains: String
  aliasSlug_not_contains: String
  aliasSlug_starts_with: String
  aliasSlug_not_starts_with: String
  aliasSlug_ends_with: String
  aliasSlug_not_ends_with: String
  slugPrefix: String
  slugPrefix_not: String
  slugPrefix_in: [String!]
  slugPrefix_not_in: [String!]
  slugPrefix_lt: String
  slugPrefix_lte: String
  slugPrefix_gt: String
  slugPrefix_gte: String
  slugPrefix_contains: String
  slugPrefix_not_contains: String
  slugPrefix_starts_with: String
  slugPrefix_not_starts_with: String
  slugPrefix_ends_with: String
  slugPrefix_not_ends_with: String
  associatedWith: AccountWhereInput
  verifiedBy: SphereVerificationWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [SphereWhereInput!]
  OR: [SphereWhereInput!]
  NOT: [SphereWhereInput!]
}

input SphereWhereUniqueInput {
  id: ID
  alias: String
  aliasSlug: String
}

type Subscription {
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  media(where: MediaSubscriptionWhereInput): MediaSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  sphere(where: SphereSubscriptionWhereInput): SphereSubscriptionPayload
  sphereVerification(where: SphereVerificationSubscriptionWhereInput): SphereVerificationSubscriptionPayload
  sphereVerificationCode(where: SphereVerificationCodeSubscriptionWhereInput): SphereVerificationCodeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  providerId: String!
  associatedWith: Account!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  providerId: String!
  associatedWith: AccountCreateOneInput!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  providerId_ASC
  providerId_DESC
}

type UserPreviousValues {
  id: ID!
  providerId: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  providerId: String
  associatedWith: AccountUpdateOneRequiredInput
}

input UserUpdateManyMutationInput {
  providerId: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  providerId: String
  providerId_not: String
  providerId_in: [String!]
  providerId_not_in: [String!]
  providerId_lt: String
  providerId_lte: String
  providerId_gt: String
  providerId_gte: String
  providerId_contains: String
  providerId_not_contains: String
  providerId_starts_with: String
  providerId_not_starts_with: String
  providerId_ends_with: String
  providerId_not_ends_with: String
  associatedWith: AccountWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  providerId: String
}
`