// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Account {
  id: ID!
  status: AccountStatus!
  firstName: String!
  lastName: String!
  emailAddress: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccountConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  status: AccountStatus
  firstName: String!
  lastName: String!
  emailAddress: String!
}

input AccountCreateManyInput {
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

type AccountEdge {
  node: Account!
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  emailAddress_ASC
  emailAddress_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AccountPreviousValues {
  id: ID!
  status: AccountStatus!
  firstName: String!
  lastName: String!
  emailAddress: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AccountScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: AccountStatus
  status_not: AccountStatus
  status_in: [AccountStatus!]
  status_not_in: [AccountStatus!]
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  emailAddress: String
  emailAddress_not: String
  emailAddress_in: [String!]
  emailAddress_not_in: [String!]
  emailAddress_lt: String
  emailAddress_lte: String
  emailAddress_gt: String
  emailAddress_gte: String
  emailAddress_contains: String
  emailAddress_not_contains: String
  emailAddress_starts_with: String
  emailAddress_not_starts_with: String
  emailAddress_ends_with: String
  emailAddress_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
}

enum AccountStatus {
  VERIFIED
  ACTIVE
  INACTIVE
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
  AND: [AccountSubscriptionWhereInput!]
  OR: [AccountSubscriptionWhereInput!]
  NOT: [AccountSubscriptionWhereInput!]
}

input AccountUpdateDataInput {
  status: AccountStatus
  firstName: String
  lastName: String
  emailAddress: String
}

input AccountUpdateInput {
  status: AccountStatus
  firstName: String
  lastName: String
  emailAddress: String
}

input AccountUpdateManyDataInput {
  status: AccountStatus
  firstName: String
  lastName: String
  emailAddress: String
}

input AccountUpdateManyInput {
  create: [AccountCreateInput!]
  update: [AccountUpdateWithWhereUniqueNestedInput!]
  upsert: [AccountUpsertWithWhereUniqueNestedInput!]
  delete: [AccountWhereUniqueInput!]
  connect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  updateMany: [AccountUpdateManyWithWhereNestedInput!]
}

input AccountUpdateManyMutationInput {
  status: AccountStatus
  firstName: String
  lastName: String
  emailAddress: String
}

input AccountUpdateManyWithWhereNestedInput {
  where: AccountScalarWhereInput!
  data: AccountUpdateManyDataInput!
}

input AccountUpdateWithWhereUniqueNestedInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateDataInput!
}

input AccountUpsertWithWhereUniqueNestedInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateDataInput!
  create: AccountCreateInput!
}

input AccountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: AccountStatus
  status_not: AccountStatus
  status_in: [AccountStatus!]
  status_not_in: [AccountStatus!]
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  emailAddress: String
  emailAddress_not: String
  emailAddress_in: [String!]
  emailAddress_not_in: [String!]
  emailAddress_lt: String
  emailAddress_lte: String
  emailAddress_gt: String
  emailAddress_gte: String
  emailAddress_contains: String
  emailAddress_not_contains: String
  emailAddress_starts_with: String
  emailAddress_not_starts_with: String
  emailAddress_ends_with: String
  emailAddress_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  id: ID
  emailAddress: String
}

type AggregateAccount {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregatePostMetadata {
  count: Int!
}

type AggregateSphere {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateManyAccounts(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createPostMetadata(data: PostMetadataCreateInput!): PostMetadata!
  updatePostMetadata(data: PostMetadataUpdateInput!, where: PostMetadataWhereUniqueInput!): PostMetadata
  updateManyPostMetadatas(data: PostMetadataUpdateManyMutationInput!, where: PostMetadataWhereInput): BatchPayload!
  upsertPostMetadata(where: PostMetadataWhereUniqueInput!, create: PostMetadataCreateInput!, update: PostMetadataUpdateInput!): PostMetadata!
  deletePostMetadata(where: PostMetadataWhereUniqueInput!): PostMetadata
  deleteManyPostMetadatas(where: PostMetadataWhereInput): BatchPayload!
  createSphere(data: SphereCreateInput!): Sphere!
  updateSphere(data: SphereUpdateInput!, where: SphereWhereUniqueInput!): Sphere
  updateManySpheres(data: SphereUpdateManyMutationInput!, where: SphereWhereInput): BatchPayload!
  upsertSphere(where: SphereWhereUniqueInput!, create: SphereCreateInput!, update: SphereUpdateInput!): Sphere!
  deleteSphere(where: SphereWhereUniqueInput!): Sphere
  deleteManySpheres(where: SphereWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  content: Json!
  slug: String!
  timeToRead: Int!
  isPublished: Boolean!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  status: POST_STATUS!
  metadata: PostMetadata!
  associatedWith: Sphere!
}

enum POST_STATUS {
  PUBLISHED
  DRAFT
  ARCHIVED
  SYNCING
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  content: Json!
  slug: String!
  timeToRead: Int
  isPublished: Boolean
  publishedAt: DateTime
  status: POST_STATUS
  metadata: PostMetadataCreateOneInput!
  associatedWith: SphereCreateOneInput!
}

type PostEdge {
  node: Post!
  cursor: String!
}

type PostMetadata {
  id: ID!
  fileHash: String!
  filename: String
}

type PostMetadataConnection {
  pageInfo: PageInfo!
  edges: [PostMetadataEdge]!
  aggregate: AggregatePostMetadata!
}

input PostMetadataCreateInput {
  fileHash: String!
  filename: String
}

input PostMetadataCreateOneInput {
  create: PostMetadataCreateInput
  connect: PostMetadataWhereUniqueInput
}

type PostMetadataEdge {
  node: PostMetadata!
  cursor: String!
}

enum PostMetadataOrderByInput {
  id_ASC
  id_DESC
  fileHash_ASC
  fileHash_DESC
  filename_ASC
  filename_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostMetadataPreviousValues {
  id: ID!
  fileHash: String!
  filename: String
}

type PostMetadataSubscriptionPayload {
  mutation: MutationType!
  node: PostMetadata
  updatedFields: [String!]
  previousValues: PostMetadataPreviousValues
}

input PostMetadataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostMetadataWhereInput
  AND: [PostMetadataSubscriptionWhereInput!]
  OR: [PostMetadataSubscriptionWhereInput!]
  NOT: [PostMetadataSubscriptionWhereInput!]
}

input PostMetadataUpdateDataInput {
  fileHash: String
  filename: String
}

input PostMetadataUpdateInput {
  fileHash: String
  filename: String
}

input PostMetadataUpdateManyMutationInput {
  fileHash: String
  filename: String
}

input PostMetadataUpdateOneRequiredInput {
  create: PostMetadataCreateInput
  update: PostMetadataUpdateDataInput
  upsert: PostMetadataUpsertNestedInput
  connect: PostMetadataWhereUniqueInput
}

input PostMetadataUpsertNestedInput {
  update: PostMetadataUpdateDataInput!
  create: PostMetadataCreateInput!
}

input PostMetadataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fileHash: String
  fileHash_not: String
  fileHash_in: [String!]
  fileHash_not_in: [String!]
  fileHash_lt: String
  fileHash_lte: String
  fileHash_gt: String
  fileHash_gte: String
  fileHash_contains: String
  fileHash_not_contains: String
  fileHash_starts_with: String
  fileHash_not_starts_with: String
  fileHash_ends_with: String
  fileHash_not_ends_with: String
  filename: String
  filename_not: String
  filename_in: [String!]
  filename_not_in: [String!]
  filename_lt: String
  filename_lte: String
  filename_gt: String
  filename_gte: String
  filename_contains: String
  filename_not_contains: String
  filename_starts_with: String
  filename_not_starts_with: String
  filename_ends_with: String
  filename_not_ends_with: String
  AND: [PostMetadataWhereInput!]
  OR: [PostMetadataWhereInput!]
  NOT: [PostMetadataWhereInput!]
}

input PostMetadataWhereUniqueInput {
  id: ID
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  slug_ASC
  slug_DESC
  timeToRead_ASC
  timeToRead_DESC
  isPublished_ASC
  isPublished_DESC
  publishedAt_ASC
  publishedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  content: Json!
  slug: String!
  timeToRead: Int!
  isPublished: Boolean!
  publishedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  status: POST_STATUS!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  content: Json
  slug: String
  timeToRead: Int
  isPublished: Boolean
  publishedAt: DateTime
  status: POST_STATUS
  metadata: PostMetadataUpdateOneRequiredInput
  associatedWith: SphereUpdateOneRequiredInput
}

input PostUpdateManyMutationInput {
  title: String
  content: Json
  slug: String
  timeToRead: Int
  isPublished: Boolean
  publishedAt: DateTime
  status: POST_STATUS
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  timeToRead: Int
  timeToRead_not: Int
  timeToRead_in: [Int!]
  timeToRead_not_in: [Int!]
  timeToRead_lt: Int
  timeToRead_lte: Int
  timeToRead_gt: Int
  timeToRead_gte: Int
  isPublished: Boolean
  isPublished_not: Boolean
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: POST_STATUS
  status_not: POST_STATUS
  status_in: [POST_STATUS!]
  status_not_in: [POST_STATUS!]
  metadata: PostMetadataWhereInput
  associatedWith: SphereWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  postMetadata(where: PostMetadataWhereUniqueInput!): PostMetadata
  postMetadatas(where: PostMetadataWhereInput, orderBy: PostMetadataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PostMetadata]!
  postMetadatasConnection(where: PostMetadataWhereInput, orderBy: PostMetadataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostMetadataConnection!
  sphere(where: SphereWhereUniqueInput!): Sphere
  spheres(where: SphereWhereInput, orderBy: SphereOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sphere]!
  spheresConnection(where: SphereWhereInput, orderBy: SphereOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SphereConnection!
  node(id: ID!): Node
}

type Sphere {
  id: ID!
  alias: String!
  slugPrefix: String!
  associatedWith(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SphereConnection {
  pageInfo: PageInfo!
  edges: [SphereEdge]!
  aggregate: AggregateSphere!
}

input SphereCreateInput {
  alias: String!
  slugPrefix: String
  associatedWith: AccountCreateManyInput
}

input SphereCreateOneInput {
  create: SphereCreateInput
  connect: SphereWhereUniqueInput
}

type SphereEdge {
  node: Sphere!
  cursor: String!
}

enum SphereOrderByInput {
  id_ASC
  id_DESC
  alias_ASC
  alias_DESC
  slugPrefix_ASC
  slugPrefix_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SpherePreviousValues {
  id: ID!
  alias: String!
  slugPrefix: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SphereSubscriptionPayload {
  mutation: MutationType!
  node: Sphere
  updatedFields: [String!]
  previousValues: SpherePreviousValues
}

input SphereSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SphereWhereInput
  AND: [SphereSubscriptionWhereInput!]
  OR: [SphereSubscriptionWhereInput!]
  NOT: [SphereSubscriptionWhereInput!]
}

input SphereUpdateDataInput {
  alias: String
  slugPrefix: String
  associatedWith: AccountUpdateManyInput
}

input SphereUpdateInput {
  alias: String
  slugPrefix: String
  associatedWith: AccountUpdateManyInput
}

input SphereUpdateManyMutationInput {
  alias: String
  slugPrefix: String
}

input SphereUpdateOneRequiredInput {
  create: SphereCreateInput
  update: SphereUpdateDataInput
  upsert: SphereUpsertNestedInput
  connect: SphereWhereUniqueInput
}

input SphereUpsertNestedInput {
  update: SphereUpdateDataInput!
  create: SphereCreateInput!
}

input SphereWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  alias: String
  alias_not: String
  alias_in: [String!]
  alias_not_in: [String!]
  alias_lt: String
  alias_lte: String
  alias_gt: String
  alias_gte: String
  alias_contains: String
  alias_not_contains: String
  alias_starts_with: String
  alias_not_starts_with: String
  alias_ends_with: String
  alias_not_ends_with: String
  slugPrefix: String
  slugPrefix_not: String
  slugPrefix_in: [String!]
  slugPrefix_not_in: [String!]
  slugPrefix_lt: String
  slugPrefix_lte: String
  slugPrefix_gt: String
  slugPrefix_gte: String
  slugPrefix_contains: String
  slugPrefix_not_contains: String
  slugPrefix_starts_with: String
  slugPrefix_not_starts_with: String
  slugPrefix_ends_with: String
  slugPrefix_not_ends_with: String
  associatedWith_every: AccountWhereInput
  associatedWith_some: AccountWhereInput
  associatedWith_none: AccountWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SphereWhereInput!]
  OR: [SphereWhereInput!]
  NOT: [SphereWhereInput!]
}

input SphereWhereUniqueInput {
  id: ID
  alias: String
}

type Subscription {
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  postMetadata(where: PostMetadataSubscriptionWhereInput): PostMetadataSubscriptionPayload
  sphere(where: SphereSubscriptionWhereInput): SphereSubscriptionPayload
}
`